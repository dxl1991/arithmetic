重启mysql: service mysqld restart
Linux安装软件：rpm -ivh 软件名.rpm
Linux卸载软件：yun -y remove xxx
mysqld是MySQL服务器，mysql是客户端。可以用mysql连任何mysqld
登录mysql ：mysql -u root -p -h 127.0.0.1 -P 3306
Commands end with ; or \G
Ctrl + L 或 system clear  清屏

windows 启动MySQL服务: net start MySQL

mysql的核心目录：
   /var/lib/mysql    安装目录
   /usr/share/mysql  放配置文件
   /usr/init.d/mysql 启停脚本
   /usr/bin :命令目录（放mysqladmin,mysqldump等命令）

mysql配置文件：
   /usr/share/mysql下面
   my-huge.cnf    高端服务器 1-2G内存
   my-large.cnf   中端服务器
   my-medium.cnf  一般
   my-small.cnf   较小
   注意：以上配置文件mysql默认不能识别，默认识别的是：/etc/my.cnf   (5.5版本)
                                                /etc/mysql-default.cnf  (5.6版本)
mysql逻辑分层：
   1、连接层 处理客户端连接
   2、服务层 提供sql处理等各种用户使用接口
            提供SQL优化器（MySQL Query Optimizer）
   3、引擎层 提供了各种存储数据的方式（InnoDB、MyISAM）
            InnoDB : 事务优先（适合高并发，行锁，开销大，可能死锁）
            MyISAM : 性能优先（表锁，开销小，无死锁）
   4、存储层 存储数据
   https://www.cnblogs.com/annsshadow/p/5037667.html

sql执行顺序：
 1 FROM <left_table>
 2 ON <join_condition>
 3 <join_type> JOIN <right_table>
 4 WHERE <where_condition>
 5 GROUP BY <group_by_list>
 6 HAVING <having_condition>
 7 SELECT
 8 DISTINCT <select_list>
 9 ORDER BY <order_by_condition>
10 LIMIT <limit_number>

索引：
   mysql索引使用了B+树的数据结构，B+树的每个节点不大于16KB，三层树高就可以存储两千万条数据，B+树的叶子节点用双向链表连接方便>或者<查询，每次查询次数都是B树的高度
   Innodb引擎一定有簇索索引（叶子节点包含了数据）：主键索引（没有的话，mysql会寻找unique列或自动新增一列:_rowid），决定了数据的物理存储结构，不能为null
   非聚集索引（辅助索引）：叶子节点中存储主键值，每次查找数据时，根据索引找到叶子节点中的主键值，根据主键值再到聚簇索引中得到完整的一行记录
   联合索引：多个字段组成的索引，节点会按创建索引字段顺序依次比较排序，最左匹配原则（必须第一个字段开始，不能中断）
   覆盖索引：select的列全部在联合索引里，所以在联合索引里找到了值就不需要返回主键索引里去取值了，减少回表的过程
   B树中间节点会存放数据，B+树数据全存在叶子节点（所以可以存更多的中间节点），且用链表连接（适合范围查找）

mysql> show engines;
+------------+---------+------------------------------------------------------------+--------------+------+------------+
| Engine     | Support | Comment                                                    | Transactions | XA   | Savepoints |
+------------+---------+------------------------------------------------------------+--------------+------+------------+
| MRG_MYISAM | YES     | Collection of identical MyISAM tables                      | NO           | NO   | NO         |
| CSV        | YES     | CSV storage engine                                         | NO           | NO   | NO         |
| MyISAM     | DEFAULT | Default engine as of MySQL 3.23 with great performance     | NO           | NO   | NO         |
| InnoDB     | YES     | Supports transactions, row-level locking, and foreign keys | YES          | YES  | YES        |
| MEMORY     | YES     | Hash based, stored in memory, useful for temporary tables  | NO           | NO   | NO         |
+------------+---------+------------------------------------------------------------+--------------+------+------------+
mysql 的增删改需要commit，但是系统默认会自动commit。使用mysql> show variables like '%autocommit%';来进行查看数据库是否是自动commit
set autocommit = 0; 关闭自动提交
oracle 默认不自动提交，需手动提交
mysql> show create table table_name; 查看表的创建语句

sql性能优化：
   explain + sql 可以查看sql的执行过程（扫描多少行，是否用到了索引，是否覆盖索引...）
   字段分析：
   1、id
       id值相同（多表联合查询）--> 从上往下，顺序执行。数据小的表优先执行（笛卡尔积，数据小的先相乘，中间结果越小）
       id值不同（子查询）--> id值越大越先执行。在嵌套查询时，先查内层，再查外层
       id值有相同又有不同（联合查询+子查询）--> id值越大越先执行,id相同的顺序执行
   2、select_type
       PRIMARY --> 包含子查询sql中的主查询（最外层）
       SUBQUERY --> 包含子查询sql中的子查询（非最外层）
       SIMPLE --> 简单查询（不包含子查询、union）
       DERIVED --> 衍生查询（使用到了临时表）
           a.在from子查询中只有一张表
             例：select cr.cname from (select * from course where tid in (1,2)) cr; 这个course就是derived
           b.在from子查询中，如果有table1 union table2，则table1就是derived，table2就是union
             例：select cr.cname from (select * from course where tid = 1 union select * from course where tid = 2)) cr;
       UNION --> 上例
       UNION RESULT --> 告知开发人员，哪些表之间存在union查询
   3、table
      告知是那张表（可能是临时表）
   4、type：索引类型、类型
      system > const > eq_ref > ref > range > index > all
      要对type进行优化，前提是要有索引。system，const只是理想情况，实际能达到ref>range

      system --> 只有一条数据的系统表 或 衍生表只有一条数据的主查询
      const --> 仅仅能查询到一条数据的sql，用于primary key 或 unique索引
      eq_ref --> 唯一性索引：对于每个索引键的查询，返回匹配唯一行数据，常见于primary key 或 unique索引（有且只有1个，不能多，不能0）
      ref --> 非唯一性索引：对于每个索引键的查询，返回匹配有多行数据（0个或多个）
      range --> 检索指定范围的行，where后面是一个范围查询（between，in，> < >= <=），(in 有时候会失效会转为all)
      index --> 查询全部索引中的数据，只需要扫描索引表  例：select tid from teacher;  tid是索引
      all --> 查询全部表中数据  例：select tid from teacher;  tid不是索引
   5、possible_keys
      可能用到的索引，可能不准
   6、key
      实际用到的索引
   7、key_len
      索引的长度（用到的索引字段类型字节长度之和），用于判断复合索引是否被完全使用
      如果索引字段可以为null，则会使用1个字节用于标识
      如果索引字段为可变长度，用两个字节标识可变长度
      utf8：1个字符3个字节
      gbk：一个字符2个字节
      latin：一个字符1个字节
   8、ref
      指明当前表所参照的字段
      select ... where a.c = b.x;(其中b.x可以为常量，const) a.c是索引字段并且a ref了 b.x
   9、rows
      被索引优化查询的数据个数，就是通过索引实际用到这个表里数据个数
   10、extra
      using filesort : 性能消耗大；需要“额外”的一次排序（查询）。一般出现在order by语句
           例：select * from table where a1 = “ order by a2; 用a1查找完，再用a2排序的时候会再去表里查找一次
           小结：对于单索引，如果排序和查找是同一个字段，不会出现using filesort；否则会出现。
                对于复合索引，不能跨列（最佳左前缀，where和order by拼起来，不要跨列使用）
      using temporary：性能消耗大，用到了临时表。一般在group by语句
           例：select * from table where a1 = in(1,2,3) group by a2; 用a1查找完，再用a2分组的时候会再去表里查找一次，并用临时表分组
      using index：性能提升；覆盖索引，不用回表查询
      using where：需要回表查询
      impossible where：where子句永远为false
           例：select * from table where a1 = 1 and a1 = 2;
      using join buffer：mysql引擎使用了连接缓存

    总结：（a,b,c,d）四个字段构成的复合索引
           a、如果使用顺序完全一致，则复合索引全部使用；如果部分一致（且不跨列使用），则使用部分索引
           b、where和order by拼起来，不跨列使用
           c、索引升级后，旧的索引要删掉，防止干扰新的索引
           d、索引需要逐步优化
           e、含 in 的范围查询需要放where条件最后
           f、不要再散列度低的字段建索引，散列度 = 字段去重行数 / 总行数

两表查询优化：
    a、小表驱动大表（where table1.id = table2.id；table1的数据量小，table1放前边性能更好）
    b、索引建立在经常使用字段上（一般情况，左外连接给左表加，右外连接给右表加）
避免索引失效原则：
    a、复合索引，不要跨列使用
    b、复合索引，尽量使用全索引匹配
    c、不要在索引上进行任何操作（计算，函数，类型转换），否则索引失效（复合索引的前边字段失效，则全部失效）
    d、复合索引不能使用不等于（!=  <>）或者 is null（is not null），否则索引失效
    e、尽量使用索引覆盖
    f、like查询尽量使用“常量”开头，以“%”开头索引失效
    g、尽量不要使用类型转换（显示、隐式），否则索引失败（name = 123 这种失败；name = '123' 这种不失败）
    h、尽量不要使用or，否则索引失败（左边的索引都会失效）
   我们学的索引优化，是一个大部分情况适用结论，但是由于sql优化器等原因，结论不是100%适用
   一般而言，范围查询（> < in），自身有效，之后的索引失效。（复合索引的B+树结构特性造成，叶子节点是有序链表，节点是按左至右排序）

一些其他的优化方法
  1、exist 和 in
   如果主查询的数据集大，则使用in
   如果子查询的数据集大，则使用exist
   select ...from table where 字段 in (子查询)
   select ...from table where exist (子查询)
   exist语法：用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False
   一种通俗的可以理解为：将主查询表的每一行，代入内查询作为检验，如果内查询返回的结果取非空值，则EXISTS子句返回TRUE，这一行行可作为外查询的结果行，否则不能作为结果。
  2、order by
   using filesort 有两种算法：双路排序，单路排序
   mysql 4.1之前默认使用双路排序：两次磁盘io，一次读取排序字段，在buffer中排序，再一次读取其他字段
   mysql 4.1之后默认使用单路排序：一次读取全部字段，在buffer中排序。但是单路排序如果数据太大，会“分片”读取到buffer里
   优化：
     a.合理使用单路，双路；合理设置buffer大小，set max_length_for_sort_data 1024 单位字节
     b.避免使用select * ...
     c.复合索引，不要跨列使用
     d.保证排序字段排序的一致性，都是升序或降序
  3、慢查询日志
    默认是关闭的，在开发调试时打开，最终部署的时候关闭
    查看是否开启：show variables like '%slow_query_log%';
    设置开启：set global slow_query_log = 1;
    设置慢查询阀值：set global long_query_time = 3; 超过3秒就记录，客户端重新登录后生效（不用重启服务）
    设置日志路径：set global slow_query_log_file = /var/lib/mysql/localhost-slog.log
    查看有几条慢查询日志：show global status like '%slow_queries%'
    通过打开慢查询日志 或者使用 mysqldumpslow 命令查看日志
    --获取返回记录最多的3个sql
      mysqldumpslow -s r -t 3 /var/lib/mysql/localhost-slog.log
    --获取访问记录最多的3个sql
      mysqldumpslow -s c -t 3 /var/lib/mysql/localhost-slog.log
    --按照时间排序，前10条包含left join查询条件的sql
      mysqldumpslow -s t -t 10 -g "left join" /var/lib/mysql/localhost-slog.log

记录所有执行的sql（这些日志很费性能，线上要关闭）
   1、profiles
      show variables like '%profiling%'; 查看profiling是否开启，默认是关闭的
      set profiling = on; 打开profiles，之后所有的执行sql将记录
      show profiles; 查看所有sql执行语句花费的时间，但是不精确，只能看到总共花费时间
   2、profile
      show profile all for query 上一步查询到的query_id; 查看sql详细执行时间
      show profile cpu block io for query query_id; 只看sql执行花费在CPU和io相关时间
   3、全局查询日志（只记录sql执行的时间点，不记录花费时间）
      show variables like '%general_log%'; 查看全局日志是否开启，默认关闭
      set global general_log = 1; 开启全局日志，之后所有sql将记录
      1)记录到表里
      set global log_output = 'table'; 设置将sql记录到mysql.general_log表里
      2)记录到文件里
      set global log_output = 'file'; 设置将sql记录到文件里
      set global general_log_file = '/tmp/general.log'; 设置记录的文件路径

锁：
  查看加锁的表：show open tables;
  加锁：lock table table_name1 read/write , table_name2 read/write , ....;
  释放锁：unlock tables;
  ---------表锁-----------
  分类：
     1、读锁：（表锁）自己：只能读，不能写，对别的表不能读，不能写；别人：可以读这个表，但是不能写，写的话一直会等待直到释放锁
     2、写锁：（表锁）自己：可以读，可以写，对别的表不能读，不能写；别人：不可以读写，读写的话会一直等待直到释放锁

  MyISAM表级锁的锁模式
    在select前，默认会对所有涉及到的表加读锁
    在执行更新操作（DML）之前，默认会给涉及的表加写锁
  分析表锁定：
    查看哪些表加了锁：show open tables;
    分析表锁的严重程度：show status like 'table%';
                  参数：Table_locks_immediate：即可能获得到的锁数
                        Table_locks_waited：需要等待的表锁数（该值越大，说明存在越大的锁竞争）
              一般建议：Table_locks_immediate / Table_locks_waited > 5000 采用InnoDB，否则采用MyISAM

  ---------行锁-----------
  手动commit模式下
      1、如果会话x对某条数据a进行DMX操作，则其他会话必须等会话x结算事务（commit/rollback）后才能对数据a进行操作（排它锁）
      2、表锁是通过unlock tables解锁 或者 事务解锁，行锁通过事务解锁（commit/rollback）
      3、行锁操作不同数据，互不影响
  行锁注意事项
      1、如果没有索引（或索引失效），行锁变表锁
      2、行锁的一种特殊情况：间隙锁：值在范围内，但却不存在。锁住相邻两个值的区间（所以不可能出现幻读）
      3、DML如果有where，则实际加锁的范围就是where后面的范围（不是实际值，没有值的行也加锁，别人插入不了）
      4、查询默认是不加锁

      共享锁：别人可以读，但不能写。可以用 select ... from ..where .. lock in share mode; 加共享锁
      排他锁：别人不能读，不能写。DMX操作默认加排他锁，或者通过 select * from table where id = 2 for update; 加排他锁
      对表加锁的时候需要先获取意向锁（排它锁会默认产生意向锁）
  行锁分析
      show status like '%innodb_row_lock%';

用 BEGIN, ROLLBACK, COMMIT来实现
    START TRANSACTION 或者 BEGIN 开始一个事务（开启事务后就不会自动提交了）
    ROLLBACK 事务回滚
    COMMIT 事务确认
    关闭连接也会释放锁

windows安装mysql：如果已经安装过，需先卸载mysql，再安装
    卸载：通过电脑自带的卸载工具卸载
          删除mysql缓存文件C:\ProgramData\MySQL
          删除注册表regedit中的所有mysql相关配置
          重启计算机
    安装：
       一直下一步，如果出现未响应，删除mysql缓存文件C:\ProgramData\MySQL,再重新打开D:\MySQL\MySQL Server 5.5\bin\MySQLInstanceConfig.exe

主从复制：master 的 binary log ---> slave 的 relay log（中继日志文件）
    1、master 写 binary log，（二进制日志事件）
    2、slave将master的binary log拷贝到自己的relay log中
    3、slave将数据读取到自己的数据库中（中继日志事件）
  二进制日志log-bin作用：
  　　1、以二进制形式记录更改数据库的SQL语句（insert，update，delete，create，drop，alter等）。
  　　2、用于MySQL主从复制。
  　　3、增量数据备份及恢复

  配置：windows :my.ini文件
        linux :/etc/my.cnf文件
        关闭防火墙:service iptables stop
        远程访问授权：grant 命令
  每次进行主从同步前，需要观察master的最新状态 show master status;
          （mysql-bin.000001、107）--->当前binary log的文件名、位置(slave配置需要)

mysql5.7开启主从同步
1、编辑主库配置/etc/my.cnf,增加配置，重启mysql
  log-bin=mysql-bin
  server-id=1
  innodb-file-per-table=ON
  skip_name_resolve=ON
  binlog-ignore-db=mysql  #不需要同步的数据库
  binlog-ignore-db=information_schema
  binlog-ignore-db=sys
  binlog-ignore-db=performance_schema
  binlog-do-db=ssjf_game
  binlog-do-db=ds0
  binlog-do-db=ds1
2、赋予从库权限
  grant FILE on *.* to 'root'@'10.1.12.213' identified by 'root';
  grant replication slave on *.* to 'root'@'10.1.12.213' identified by 'root';
  flush privileges;
  show master status;
2、编辑从库配置/etc/my.cnf,增加配置，重启mysql
  server-id=2
3、增加复制内容
 CHANGE MASTER TO MASTER_HOST='10.1.12.196',
 MASTER_PORT=3306,
 MASTER_USER='root',
 MASTER_PASSWORD='root',
 MASTER_LOG_FILE='mysql-bin.000004', # 主库信息
 MASTER_LOG_POS=1002;
5、开启主从同步
  start slave:
  show slave status \G  查看释放开启同步，Slave_IO_Running 和 Slave_SQL_Running 要是yes

主从同步延迟表现
    1、 show slave status显示参数Seconds_Behind_Master不为0，这个数值可能会很大
    2、 show slave status显示参数Relay_Master_Log_File和Master_Log_File显示bin-log的编号相差很大，说明bin-log在从库上没有及时同步，所以近期执行的bin-log和当前IO线程所读的bin-log相差很大
    3、 mysql的从库数据目录下存在大量mysql-relay-log日志，该日志同步完成之后就会被系统自动删除，存在大量日志，说明主从同步延迟很厉害
解决：
  1、sync_binlog在slave端设置为0（表示MySQL不控制binlog的刷新，由文件系统自己控制它的缓存的刷新）
  2、slave端，如果使用的存储引擎是innodb，innodb_flush_log_at_trx_commit =2
  3、直接禁用slave端的binlog

分库分表
   当单表数据行数达到500万行，推荐分表
   垂直拆分，水平拆分
   跨库的关联查询解决
       1、字段冗余，常用字段冗余存储在不同的表
       2、全局表，一些配置表可以多个服存放
       3、RPC 调用，系统组装数据
   分布式事务解决
       1、seata  其前身是fescar，是一种分布式事务的解决方案
       2、Atomikos
       3、LCN
   水平拆分（考虑：扩容缩容、热点数据）
       1、按时间拆分
       2、range
       3、取模
       4、一致性hash（hash环）
   水平分库分表带来的问题
       1、翻页查询
       2、全局id
   第三方解决方案：
       1、shardingSphere JDBC ---> 动态选择数据库
          绑定表：两张表同字段使用同一个分片算法，并且绑定
          广播表：每个库都插入相同数据
          动态表：实际表名是逻辑表名+动态字符拼接
       2、mycat

mybatis generator 工具可以生成mapper代码

第一范式：数据库中的每一列都是不可分割的基本数据项，即实体中的某个属性不能有多个值或者不能有重复的属性（每列不能再拆分）
第二范式：满足第二范式必须先满足第一范式，第二范式要求数据库的每个实例或行必须可以被唯一的区分（要有主键）
第三范式：满足第三范式必须先满足第二范式，第三范式要求一个数据库表中不包含已在其他表中已包含的非主关键字信息（不能冗余）

事务隔离级别
    未提交读(Read Uncommitted)：允许脏读，其他事务只要修改了数据，即使未提交，本事务也能看到修改后的数据值。也就是可能读取到其他会话中未提交事务修改的数据
    提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)。
    可重复读(Repeated Read)：可重复读。无论其他事务是否修改并提交了数据，在这个事务中看到的数据值始终不受其他事务影响。
    串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞
    MySQL数据库(InnoDB引擎)默认使用可重复读(Repeatable read)
读的一致性问题
    脏读：读到了其他事务未提交的数据
    不可重复读：后一次读到了其他事务update、delete的数据
    幻读：后一次读到了其他事务的insert数据

redo log是用来恢复数据的，用于保障已提交事务的持久化特性（故障后恢复）
     mysql修改的数据不会马上写入磁盘而是放入缓冲池，让后台线程定期同步到磁盘。而redo log则在事务提交后马上写入磁盘
undo log是用来回滚数据的，用于保障未提交事务的原子性，记录数据被修改前的信息
     每条数据变更(insert/update/delete)操作都伴随一条undo log的生成,并且回滚日志必须先于数据持久化到磁盘上
InnoDB的 MVCC ，是通过在每行记录的后面保存两个隐藏的列来实现的（undo log + 版本号）
这两个列，一个保存了行的创建时间，一个保存了行的过期时间，当然存储的并不是实际的时间值，而是系统版本号。
他的主要实现思想是通过数据多版本来做到读写分离。从而实现不加锁读进而做到读写并行。

什么时候用myIsam，什么时候用innodb
如果应用中需要执行大量的SELECT查询，那么MyISAM是更好的选择，支持全文索引，对like查询更友好。索引文件会压缩，小很多
如果应用中需要执行大量的INSERT或UPDATE操作，则应该使度用InnoDB，这样可以提高多用户并发操作的性能

mysql中有utf8和utf8mb4两种编码，在mysql中请大家忘记**utf8**，永远使用**utf8mb4**。这是mysql的一个遗留问题，mysql中的utf8最多只能支持3bytes长度的字符编码，对于一些需要占据4bytes的文字，mysql的utf8就不支持了，要使用utf8mb4才行

sharding-scaling数据迁移
1、启动sharding-scaling服务
2、启动sharding-proxy服务(连接目标数据源)
3、调用接口
curl -X POST --url http://localhost:8888/shardingscaling/job/start \
--header 'content-type: application/json' \
--data '{
   "ruleConfiguration": {
      "sourceDatasource": "ds_0: !!org.apache.shardingsphere.orchestration.core.configuration.YamlDataSourceConfiguration\n  dataSourceClassName: com.zaxxer.hikari.HikariDataSource\n  properties:\n    jdbcUrl: jdbc:mysql://127.0.0.1:3306/ssjf_game?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC&useSSL=false&zeroDateTimeBehavior=convertToNull&tinyInt1isBit=false\n    driverClassName: com.mysql.jdbc.Driver\n    username: root\n    password: Dianchu123!\n    connectionTimeout: 30000\n    idleTimeout: 60000\n    maxLifetime: 1800000\n    maxPoolSize: 100\n    minPoolSize: 10\n    maintenanceIntervalMilliseconds: 30000\n    readOnly: false\n",
      "sourceRule": "tables:\n  u_expression:\n    actualDataNodes: ds_0.u_expression\n",
      "destinationDataSources": {
         "name": "ds_0",
         "password": "root",
         "url": "jdbc:mysql://10.1.11.21:3307/sharding_db?serverTimezone=UTC&useSSL=false&tinyInt1isBit=false",
         "username": "root"
      }
   },
   "jobConfiguration": {
      "concurrency": 1
   }
}'

mysql tinyint类型变Boolean类型问题：
  如果tinyInt1isBit=true（默认），且tinyInt存储长度为1，则转为java.lang.Boolean，否则转为java.lang.Integer
解决：
  1、避免使用长度为 1 的 tinyint 类型字段存储数字格式的数据，tinyInt(1) 只用来代表Boolean含义的字段，可以tinyint(2)
  2、JDBC的URL增加 tinyInt1isBit=false参数，注意参数名区分大小写，否则不生效