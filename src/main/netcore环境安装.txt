1、安装
  https://docs.microsoft.com/zh-cn/dotnet/core/install/linux
  1、将 Microsoft 包签名密钥添加到受信任密钥列表，并添加 Microsoft 包存储库
   sudo rpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm
  2、安装 SDK
   sudo yum install dotnet-sdk-3.1
  3、命令查看安装了哪些版本
   dotnet --list-sdks 和 dotnet --list-runtimes 

2、nuget使用
  类似maven，一个包管理器。
  Install-Package xxxx

4、打包
   cd到项目根目录（csproj文件所在目录）
   dotnet build --runtime linux-x64

5、运行程序
  dotnet xxxx.dll
运行程序报错：
Failed to load , error: libunwind.so.8: cannot open shared object file: No such file or directory
Failed to bind to CoreCLR at '/game/testMono/Echoserver/linux-x64/libcoreclr.so'
解决：
   yum install libunwind

dotnet性能分析工具：
https://docs.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dump
dotnet-counters: 实时统计runtime的状况, 包括 CPU、内存、GC、异常等
  安装：dotnet tool install --global dotnet-counters
  使用：dotnet counters monitor -p <pid> --refresh-interval 3  //3秒打印一次负载情况
dotnet-trace: 类似性能探测器
  安装：dotnet tool install --global dotnet-trace
  使用：dotnet trace collect -p <pid>
       使用vs打开生成的文件trace.nettrace
dotnet-dump: 程序崩溃时使用该工具，dump内存快照
  安装：dotnet tool install --global dotnet-dump
  使用：1、dotnet-dump collect -p <pid> 捕获堆栈信息到xxx.dmp文件
       2、dotnet dump analyze <dump-name> 启动交互式 shell 以了解堆栈
       3、分析 SOS 命令
          clrthreads  查看所有线程
          setthread 7 设置当前操作线程
          clrstack    获取线程调用信息
          syncblk     分析死锁信息
  注意：需要与运行进程的用户相同用户才能执行dump操作
dotnet-gcdump : 从当前正在运行的进程中收集 GC 转储
  安装：dotnet tool install --global dotnet-gcdump
  使用：dotnet-gcdump ps 列出可为其收集 GC 转储的 dotnet 进程,生成一个.gcdump 文件，用vs打开可以看到对象分布情况
       dotnet-gcdump collect -p <pid> 从当前正在运行的进程中收集 GC 转储
       dotnet-gcdump report <gcdump_filename> >> a.txt 从以前生成的 GC 转储生成报表，并将其写入a.txt
     或
       dotnet-gcdump report -p <pid> >> a.txt 从正在运行的进程生成报表，并将其写入a.txt

定位cpu占用高的问题（https://www.cnblogs.com/zhouandke/p/11070114.html）
    1、ps -ef | grep dotnet //查看.net进程PID
    2、top -Hp <pid>  //查看进程<pid>占用CPU高的线程，并转16进制
    3、dotnet-dump collect -p <pid> //dump进程
    4、dotnet-dump analyze <file_name> //分析dump文件
        4.1 clrthreads //查看所有线程，用步骤2得出的线程id找到DBG
        4.2 setthread <DBG> //设置当前操作线程
        4.3 clrstack //获取线程调用信息，定位代码
定位内存泄露问题
    1、dotnet-gcdump collect -p <pid> 从当前正在运行的进程中收集内存快照并写入文件
    2、通过vs打开dump文件，查看内存对象信息
    3、发现数量异常的对象