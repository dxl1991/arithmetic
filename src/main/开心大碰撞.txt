玩家数据相关：
    Account表数据redis缓存七天
    模块数据保留redis缓存一天，下线保存，上线拿完后清除
    玩家离线后本地保留五分钟
    玩家数据每五分钟同步到数据库一次，只同步改变了的表。db任务投递到异步队列，如果上次投递的任务还没执行完就不投递了
    玩家个人数据每五分钟同步一次到mongodb，使用的公共线程池

线程池相关：
    逻辑服任务处理使用线程池默认队列
    Netty接收客户端最大包长度2kb
    Netty启动端口和连接客户端使用的同一个线程池NioEventGroups
    轮训守护线程1s检测一次战斗战斗线程，如果某次计算时间超过3s就kill线程然后重新起一个线程
    战斗物理引擎计算逻辑挑选任务最少的（消息线程池）线程池（单线程）执行
    异步线程池（单线程）数组，错峰启动时间。玩家db任务根据PlayerId取摸选择线程池投递
    消息处理线程池（单线程）数组，大小=4*cpu核数。
    消息任务根据session的hashcode取摸选择线程池投递，如果这个线程池队列堆积了很多任务，则挑选任务最少的线程池执行；非必要消息会在线程池队列任务堆积数量达到一定量的时候，拒绝处理

匹配：
   玩家加入队伍，队伍与队伍直接撮合。队伍对象池化
   每种匹配类型对应一个队列（存放队伍），一个定时器，每100ms轮询一次，进行一次撮合
   撮合的时候，采用引用复制，volatile修饰队伍状态，并判断队伍状态，达到无锁操作

服务器之间：
    服务器之间10秒同步一次负载，选服的时候选择负载系数最低服务器

战斗帧率，一秒30帧，一次发射按照一帧一帧计算刚体的位置，速度，碰撞等，并记录关键点，等计算完成发射给客户端。
刚体速度很小的时候会强行设置刚体速度为0

所以新的服务器框架设计 网关不参与路由功能 网关的存在是有一些作用
网关的作用：
1、保持与玩家的会话交互，让逻辑服只关注业务逻辑
2、逻辑服直接切换，玩家无感知
3、能够直接有效控制流量
4、根据负载选择逻辑服
5、针对一些无需逻辑广播的协议，可以直接发网关广播

压测问题：
异步db队列线程太少，导致任务堆积，任务引用玩家数据，导致下线的玩家数据不能被回收，导致内存泄露、内存不足，导致一直gc、gc超时，导致任务越发处理不了，堆积越来越多

线上问题：
  websocket连接解析proto报错（偶现）
  原因：服务器缺少拆包逻辑，当客户端多个包用同一个帧发送过来，服务器解析错误。
  解决：通过抓包分析，解析失败的包后面多了一个ping包。查看客户端代码，使用缓冲区发送数据，多个数据包可能放入缓冲区用一帧发送。加上和tcp一样的拆包逻辑就可以了
       websocket保证数据是一帧一帧的接收，但是同一帧里有多个包的话，需要应用层自己拆包